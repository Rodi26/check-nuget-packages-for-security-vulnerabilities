name: dotnet build pipeline checking nuget vulnerabilities

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    
    # Run every night at 2:00 AM UTC
    - cron: '0 2 * * *'
    
  workflow_dispatch:

env:
  JFROG_CLI_LOG_LEVEL: DEBUG

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JF_URL: ${{ secrets.JFROG_URL }}
      JF_BUILD_NUMBER: ${{ github.run_number }}
      SSL_CERT_DIR: /etc/ssl/certs
      SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      id: setup-cli
      env:
         JF_PROJECT: sai
      with:
          oidc-provider-name: rodolphef-nuget-webui
          oidc-audience: rodolphef-lollms-nuget-audience
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          5.0.x
          8.0.x
    
    - name: Install Mono, NuGet and SSL dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mono-complete libssl-dev libssl3 openssl ca-certificates
        # Install NuGet CLI
        curl -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        sudo mv nuget.exe /usr/local/bin/
        sudo chmod +x /usr/local/bin/nuget.exe
    
    - name: Configure NuGet for JFrog
      run: |
        jf nuget-config --repo-resolve soleng-dev-nuget
    
    - name: Restore dependencies
      run: |
        dotnet restore VulnerableApp.sln
    

    
    - name: Build
      run: |
        dotnet build VulnerableApp.sln --no-restore
    
    - name: Test
      run: |
        dotnet test VulnerableApp.sln --no-build --verbosity normal
    
    - name: Collect build info
      run: |
        jf rt build-collect-env 
        jf rt build-add-dependencies .
        jf rt build-add-git
    
    - name: Publish build info
      run: |
        jf rt build-publish vulnerable-app ${{ github.run_number }}
