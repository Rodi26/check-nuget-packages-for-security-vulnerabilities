name: dotnet build pipeline checking nuget vulnerabilities

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    
    # Run every night at 2:00 AM UTC
    - cron: '0 2 * * *'
    
  workflow_dispatch:

env:
  JFROG_CLI_LOG_LEVEL: DEBUG

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JF_URL: ${{ secrets.JFROG_URL }}
      JF_BUILD_NUMBER: ${{ github.run_number }}
      SSL_CERT_DIR: /etc/ssl/certs
      SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      id: setup-cli
      env:
         JF_PROJECT: sai
      with:
          oidc-provider-name: rodolphef-nuget-webui
          oidc-audience: rodolphef-lollms-nuget-audience
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          5.0.x
          8.0.x
    
    - name: Install Mono, NuGet and SSL dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mono-complete libssl-dev libssl3 openssl ca-certificates
        # Install NuGet CLI
        curl -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        sudo mv nuget.exe /usr/local/bin/
        sudo chmod +x /usr/local/bin/nuget.exe
    
    - name: Configure NuGet for JFrog
      run: |
        jf nuget-config --repo-resolve soleng-dev-nuget --repo-deploy soleng-dev-nuget
    
    - name: Configure .NET for JFrog
      run: |
        jf dotnet-config --repo-resolve soleng-dev-nuget --repo-deploy soleng-dev-nuget
    
    - name: Restore dependencies with JFrog
      run: |
        jf dotnet restore VulnerableApp.sln --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
    
    - name: Check for vulnerabilities
      run: |
        jf dotnet list package --vulnerable --include-transitive 2>&1 | tee build.log
        echo "Analyze dotnet list package command log output..."
        # Check for actual vulnerability entries (not just the word "vulnerable")
        if grep -q -E "(critical|high|moderate|low).*https://github.com/advisories" build.log; then
          echo "Security Vulnerabilities found on the log output"
          exit 1
        else
          echo "No security vulnerabilities found"
        fi
    
    - name: Build with JFrog
      run: |
        jf dotnet build VulnerableApp.sln --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
    
    - name: Publish with JFrog
      run: |
        jf dotnet publish src/VulnerableApp.WebApi/VulnerableApp.WebApi.csproj --configuration Release --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
    
    - name: Package artifacts
      run: |
        # Create NuGet packages for libraries
        jf dotnet pack src/VulnerableApp.Core.Extensions/VulnerableApp.Core.Extensions.csproj --configuration Release --output ./artifacts/packages --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
        jf dotnet pack src/VulnerableApp.Library.Contracts/VulnerableApp.Library.Contracts.csproj --configuration Release --output ./artifacts/packages --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
        jf dotnet pack src/VulnerableApp.Library.Impl/VulnerableApp.Library.Impl.csproj --configuration Release --output ./artifacts/packages --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
        jf dotnet pack src/VulnerableApp.Repository.Contracts/VulnerableApp.Repository.Contracts.csproj --configuration Release --output ./artifacts/packages --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
        jf dotnet pack src/VulnerableApp.Repository.Impl/VulnerableApp.Repository.Impl.csproj --configuration Release --output ./artifacts/packages --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai
        
        # Copy published web application
        mkdir -p ./artifacts/webapp
        cp -r src/VulnerableApp.WebApi/bin/Release/net5.0/publish/* ./artifacts/webapp/
    
    - name: Publish NuGet packages to JFrog
      run: |
        # Publish NuGet packages using JFrog RT upload with NuGet repository
        jf rt upload "./artifacts/packages/*.nupkg" soleng-dev-nuget/ --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai --flat=false
    
    - name: Upload artifacts to JFrog
      run: |
        # Upload web application artifacts to generic repository
        jf rt upload "./artifacts/webapp/*" soleng-dev-generic-local/vulnerable-app/${{ github.run_number }}/webapp/ --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai --recursive
        
        # Upload build artifacts (DLLs, PDBs) to generic repository
        jf rt upload "src/**/bin/Release/**/*.dll" soleng-dev-generic-local/vulnerable-app/${{ github.run_number }}/binaries/ --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai --recursive
        jf rt upload "src/**/bin/Release/**/*.pdb" soleng-dev-generic-local/vulnerable-app/${{ github.run_number }}/symbols/ --build-name vulnerable-app --build-number ${{ github.run_number }} --project sai --recursive
    
    - name: Collect build info
      run: |
        jf rt build-collect-env 
        jf rt build-add-dependencies .
        jf rt build-add-git
    
    - name: Publish build info
      run: |
        jf rt build-publish vulnerable-app ${{ github.run_number }}
